#==============================================================================#

# Loading phytools and dependencies
require(phytools)

#==============================================================================#

#====================#
# CATEGORICAL TRAITS #
#====================#

# Loading tree
stryphnod.tree <- read.nexus("pruned_tree.nex")

# Loading character states (categorical traits must be formatted as a 
# data.frame, with tip labels as row names and trait labels as column names)
traits <- read.csv("data_cat.csv", header = TRUE, row.names = 1,
                   na.strings = "")

# The data.frame needs to be transformed into a named vector
# containing tip labels as names and character states as factors.
plyr::count(traits$N_grains)
cat.trait <- factor(traits$N_grains, levels = c("1", "2", "4", "8", "12", "16", "32", 
                                                "1_&_2", "4_&_8", "4_&_8_&_12", 
                                                "4_&_8_&_12_&_16", "8_&_12_&_16", 
                                                "8_&_16", "12_&_16",
                                                         "missing"))
cat.trait[is.na(cat.trait)] <- "missing"
names(cat.trait) <- rownames(traits)

# The named vector, then, needs to be transformed into a binary matrix
# with tip labels as row names and character states as columns
bin.matrix <- to.matrix(cat.trait, levels(cat.trait))

# Dealing with polymorphisms
## When taxa with polymorphisms are present, we must assign a value
# equal to 1/(number of states) for each possible state and then remove 
# the column that refers to the polymorphic state. 

# Polymorphism 1_&_2
polymorph8 <- rownames(bin.matrix)[bin.matrix[ , c(8)] == 1]
bin.matrix[polymorph8, c(1, 2)] <- 1/2

# Polymorphism 4_&_8
polymorph9 <- rownames(bin.matrix)[bin.matrix[ , c(9)] == 1]
bin.matrix[polymorph9, c(3, 4)] <- 1/2

# Polymorphism 4_&_8_12
polymorph10 <- rownames(bin.matrix)[bin.matrix[ , c(10)] == 1]
bin.matrix[polymorph10, c(3, 4, 5)] <- 1/3

# Polymorphism 4_&_8_&_12_&_16
polymorph11 <- rownames(bin.matrix)[bin.matrix[ , c(11)] == 1]
bin.matrix[polymorph11, c(3, 4, 5, 6)] <- 1/4

# Polymorphism 8_&_12_&_16
polymorph12 <- rownames(bin.matrix)[bin.matrix[ , c(12)] == 1]
bin.matrix[polymorph12, c(4, 5, 6)] <- 1/3

# Polymorphism 8_&_16
polymorph13 <- rownames(bin.matrix)[bin.matrix[ , c(13)] == 1]
bin.matrix[polymorph13, c(4, 6)] <- 1/2

# Polymorphism 12_&_16
polymorph14 <- rownames(bin.matrix)[bin.matrix[ , c(14)] == 1]
bin.matrix[polymorph14, c(5, 6)] <- 1/2

# Removing columns indicating polymorphism
bin.matrix <- bin.matrix[ , -c(8, 9, 10, 11, 12, 13, 14)]

# Which taxa show missing data? 
missing.data <- names(which(bin.matrix[ , "missing"] == 1))

# For missing data, we must assign a prior probability distribution on the tips 
# that is flat across all possible states.
## Removing the column 'missing'
bin.matrix <- bin.matrix[ , -c(ncol(bin.matrix))]
## Assigning 1/(number of states) for all possible states
bin.matrix[row.names(bin.matrix) %in% missing.data, ] <- 1/ncol(bin.matrix) 

# Running stochastic mapping (this can take a while)
trees <- make.simmap(stryphnod.tree, bin.matrix, model = "ER", nsim = 100)
obj <- summary(trees, plot = FALSE)

# Plotting
cols <- setNames(palette()[1:length(colnames(bin.matrix))], colnames(bin.matrix))
plot(obj, colors = cols, fsize = 0.7, cex = c(0.33,0.4), lwd = 1, ftype="i", offset = 0.5, type = "phylogram")
add.simmap.legend(colors = cols, x = 0.1, y = 37, prompt = FALSE, fsize=0.9)

# Saving as pdf
pdf("all_analyses/cat/N_grains/plot.pdf")
plot(obj, colors = cols, fsize = 0.7, cex = c(0.35,0.4), lwd = 1, ftype="i", offset = 0.5, type = "phylogram")
add.simmap.legend(colors = cols, x = 0.1, y = 37, prompt = FALSE, fsize=0.9)
dev.off()

